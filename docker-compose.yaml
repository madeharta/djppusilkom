services:
  write-postgres:
    image: postgres:latest
    container_name: write-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  read-postgres:
    image: postgres:latest
    container_name: read-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  gatewayd:
    image: gatewaydio/gatewayd:latest
    container_name: gatewayd
    command:
      [
        "run",
        "--config",
        "/opt/gatewayd-modif.yaml",
        "--tracing",
        "--collector-url",
        "tempo:4317",
      ]
    pull_policy: always
    environment:
      # For more information about the environment variables, see:
      # https://docs.gatewayd.io/using-gatewayd/configuration#environment-variables
      - GATEWAYD_CLIENTS_DEFAULT_WRITES_ADDRESS=write-postgres:5432
      - GATEWAYD_CLIENTS_DEFAULT_READS_ADDRESS=read-postgres:5432
      # - GATEWAYD_LOGGERS_DEFAULT_LEVEL=debug
    ports:
      # GatewayD server for PostgreSQL clients to connect to
      - "15432:15432"
      # Prometheus metrics:
      #   http://localhost:9090/metrics # Make sure the port is not used by prometheus before uncommenting the following line
      # - "9090:9090"
      # GatewayD HTTP gateway:
      #   http://localhost:18080/swagger-ui/ for the API documentation
      #   http://localhost:18080/healthz for the health check
      - "18080:18080"
      # GatewayD gRPC API with reflection enabled:
      #   You can use grpcurl or grpc-client-cli to interact with it
      - "19090:19090"
    volumes:
      - ./:/opt:ro
    links:
      - write-postgres
      - read-postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://gatewayd:18080/healthz"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      write-postgres:
        condition: service_healthy
      read-postgres:
        condition: service_healthy
        

